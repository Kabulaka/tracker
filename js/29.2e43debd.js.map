{"version":3,"file":"js/29.2e43debd.js","mappings":"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","sources":["webpack://log-tracker/./node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js","webpack://log-tracker/./node_modules/dagre-d3-es/src/dagre-js/util.js","webpack://log-tracker/../src/diagrams/flowchart/flowDiagram-v2.ts","webpack://log-tracker/../src/diagrams/flowchart/flowRenderer-v2.js","webpack://log-tracker/../src/diagrams/flowchart/styles.ts"],"sourcesContent":["import * as util from '../util.js';\n\nexport { addHtmlLabel };\n\nfunction addHtmlLabel(root, node) {\n  var fo = root.append('foreignObject').attr('width', '100000');\n\n  var div = fo.append('xhtml:div');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  var label = node.label;\n  switch (typeof label) {\n    case 'function':\n      div.insert(label);\n      break;\n    case 'object':\n      // Currently we assume this is a DOM object.\n      div.insert(function () {\n        return label;\n      });\n      break;\n    default:\n      div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style('display', 'inline-block');\n  // Fix for firefox\n  div.style('white-space', 'nowrap');\n\n  var client = div.node().getBoundingClientRect();\n  fo.attr('width', client.width).attr('height', client.height);\n\n  return fo;\n}\n","import * as _ from 'lodash-es';\n\n// Public utility functions\nexport { isSubgraph, edgeToId, applyStyle, applyClass, applyTransition };\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + ':' + escapeId(e.w) + ':' + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, '\\\\:') : '';\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom.attr('class', classFn).attr('class', otherClasses + ' ' + dom.attr('class'));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","// @ts-ignore: TODO Fix ts errors\nimport flowParser from './parser/flow';\nimport flowDb from './flowDb';\nimport flowRendererV2 from './flowRenderer-v2';\nimport flowStyles from './styles';\nimport { MermaidConfig } from '../../config.type';\nimport { setConfig } from '../../config';\n\nexport const diagram = {\n  parser: flowParser,\n  db: flowDb,\n  renderer: flowRendererV2,\n  styles: flowStyles,\n  init: (cnf: MermaidConfig) => {\n    if (!cnf.flowchart) {\n      cnf.flowchart = {};\n    }\n    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    // flowchart-v2 uses dagre-wrapper, which doesn't have access to flowchart cnf\n    setConfig({ flowchart: { arrowMarkerAbsolute: cnf.arrowMarkerAbsolute } });\n    flowRendererV2.setConf(cnf.flowchart);\n    flowDb.clear();\n    flowDb.setGen('gen-2');\n  },\n};\n","import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select, curveLinear, selectAll } from 'd3';\n\nimport flowDb from './flowDb';\nimport { getConfig } from '../../config';\nimport utils from '../../utils';\n\nimport { render } from '../../dagre-wrapper/index.js';\nimport { addHtmlLabel } from 'dagre-d3-es/src/dagre-js/label/add-html-label.js';\nimport { log } from '../../logger';\nimport common, { evaluate } from '../common/common';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\n\nconst conf = {};\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param vert Object containing the vertices.\n * @param g The graph that is to be drawn.\n * @param svgId\n * @param root\n * @param doc\n * @param diagObj\n */\nexport const addVertices = function (vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = vert[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let classStr = 'default';\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(' ');\n    }\n    classStr = classStr + ' flowchart-label';\n    const styles = getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    let vertexNode;\n    log.info('vertex', vertex, vertex.labelType);\n    if (vertex.labelType === 'markdown') {\n      log.info('vertex', vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n        const node = {\n          label: vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            (s) => `<i class='${s.replace(':', ' ')}'></i>`\n          ),\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS('http://www.w3.org/2000/svg', 'text');\n        svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n        const rows = vertexText.split(common.lineBreakRegex);\n\n        for (const row of rows) {\n          const tspan = doc.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n          tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n          tspan.setAttribute('dy', '1em');\n          tspan.setAttribute('x', '1');\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'round':\n        radious = 5;\n        _shape = 'rect';\n        break;\n      case 'square':\n        _shape = 'rect';\n        break;\n      case 'diamond':\n        _shape = 'question';\n        break;\n      case 'hexagon':\n        _shape = 'hexagon';\n        break;\n      case 'odd':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'lean_right':\n        _shape = 'lean_right';\n        break;\n      case 'lean_left':\n        _shape = 'lean_left';\n        break;\n      case 'trapezoid':\n        _shape = 'trapezoid';\n        break;\n      case 'inv_trapezoid':\n        _shape = 'inv_trapezoid';\n        break;\n      case 'odd_right':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'circle':\n        _shape = 'circle';\n        break;\n      case 'ellipse':\n        _shape = 'ellipse';\n        break;\n      case 'stadium':\n        _shape = 'stadium';\n        break;\n      case 'subroutine':\n        _shape = 'subroutine';\n        break;\n      case 'cylinder':\n        _shape = 'cylinder';\n        break;\n      case 'group':\n        _shape = 'rect';\n        break;\n      case 'doublecircle':\n        _shape = 'doublecircle';\n        break;\n      default:\n        _shape = 'rect';\n    }\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      labelType: vertex.labelType,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === 'group' ? 500 : undefined,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param {object} edges The edges to add to the graph\n * @param {object} g The graph object\n * @param diagObj\n */\nexport const addEdges = function (edges, g, diagObj) {\n  log.info('abc78 edges = ', edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  if (edges.defaultStyle !== undefined) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n\n  edges.forEach(function (edge) {\n    cnt++;\n\n    // Identify Link\n    var linkIdBase = 'L-' + edge.start + '-' + edge.end;\n    // count the links from+to the same node to give unique id\n    if (linkIdCnt[linkIdBase] === undefined) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + '-' + linkIdCnt[linkIdBase];\n    log.info('abc78 new link id to be used is', linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    var linkNameStart = 'LS-' + edge.start;\n    var linkNameEnd = 'LE-' + edge.end;\n\n    const edgeData = { style: '', labelStyle: '' };\n    edgeData.minlen = edge.length || 1;\n    //edgeData.id = 'id' + cnt;\n\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    // Check of arrow types, placed here in order not to break old rendering\n    edgeData.arrowTypeStart = 'arrow_open';\n    edgeData.arrowTypeEnd = 'arrow_open';\n\n    /* eslint-disable no-fallthrough */\n    switch (edge.type) {\n      case 'double_arrow_cross':\n        edgeData.arrowTypeStart = 'arrow_cross';\n      case 'arrow_cross':\n        edgeData.arrowTypeEnd = 'arrow_cross';\n        break;\n      case 'double_arrow_point':\n        edgeData.arrowTypeStart = 'arrow_point';\n      case 'arrow_point':\n        edgeData.arrowTypeEnd = 'arrow_point';\n        break;\n      case 'double_arrow_circle':\n        edgeData.arrowTypeStart = 'arrow_circle';\n      case 'arrow_circle':\n        edgeData.arrowTypeEnd = 'arrow_circle';\n        break;\n    }\n\n    let style = '';\n    let labelStyle = '';\n\n    switch (edge.stroke) {\n      case 'normal':\n        style = 'fill:none;';\n        if (defaultStyle !== undefined) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== undefined) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'solid';\n        break;\n      case 'dotted':\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'dotted';\n        edgeData.style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';\n        break;\n      case 'thick':\n        edgeData.thickness = 'thick';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 3.5px;fill:none;';\n        break;\n      case 'invisible':\n        edgeData.thickness = 'invisible';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 0;fill:none;';\n        break;\n    }\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n    }\n\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n    if (edge.style === undefined) {\n      edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none;';\n    }\n\n    edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n\n    edgeData.id = linkId;\n    edgeData.classes = 'flowchart-link ' + linkNameStart + ' ' + linkNameEnd;\n\n    // Add the edge to the graph\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\n\n/**\n * Returns the all the styles from classDef statements in the graph definition.\n *\n * @param text\n * @param diagObj\n * @returns {object} ClassDef styles\n */\nexport const getClasses = function (text, diagObj) {\n  log.info('Extracting classes');\n  diagObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    return;\n  }\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text\n * @param id\n */\n\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing flowchart');\n  diagObj.db.clear();\n  flowDb.setGen('gen-2');\n  // Parse the graph definition\n  diagObj.parser.parse(text);\n\n  // Fetch the default direction, use TD if none was found\n  let dir = diagObj.db.getDirection();\n  if (dir === undefined) {\n    dir = 'TD';\n  }\n\n  const { securityLevel, flowchart: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Handle root and document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: dir,\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 0,\n      marginy: 0,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info('Subgraphs - ', subGraphs);\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    log.info('Subgraph - ', subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      'group',\n      undefined,\n      subG.classes,\n      subG.dir\n    );\n  }\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const vert = diagObj.db.getVertices();\n\n  const edges = diagObj.db.getEdges();\n\n  log.info('Edges', edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    // for (let i = 0; i < subGraphs.length; i++) {\n    subG = subGraphs[i];\n\n    selectAll('cluster').append('text');\n\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info('Setting up subgraphs', subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g, diagObj);\n\n  // Add custom shapes\n  // flowChartShapes.addToRenderV2(addShape);\n\n  // Set up an SVG group so that we can translate the final graph.\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(element, g, ['point', 'circle', 'cross'], 'flowchart', id);\n\n  utils.insertTitle(svg, 'flowchartTitleText', conf.titleTopMargin, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // Index nodes\n  diagObj.db.indexNodes('subGraph' + i);\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n\n  // If node has a link, wrap it in an anchor SVG object.\n  const keys = Object.keys(vert);\n  keys.forEach(function (key) {\n    const vertex = vert[key];\n\n    if (vertex.link) {\n      const node = select('#' + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n        if (securityLevel === 'sandbox') {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', '_top');\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);\n        }\n\n        const linkNode = node.insert(function () {\n          return link;\n        }, ':first-child');\n\n        const shape = node.select('.label-container');\n        if (shape) {\n          linkNode.append(function () {\n            return shape.node();\n          });\n        }\n\n        const label = node.select('.label');\n        if (label) {\n          linkNode.append(function () {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\n\nexport default {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw,\n};\n","/** Returns the styles given options */\nexport interface FlowChartStyleOptions {\n  arrowheadColor: string;\n  border2: string;\n  clusterBkg: string;\n  clusterBorder: string;\n  edgeLabelBackground: string;\n  fontFamily: string;\n  lineColor: string;\n  mainBkg: string;\n  nodeBorder: string;\n  nodeTextColor: string;\n  tertiaryColor: string;\n  textColor: string;\n  titleColor: string;\n}\n\nconst getStyles = (options: FlowChartStyleOptions) =>\n  `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\n\nexport default getStyles;\n"],"names":["addHtmlLabel","root","node","fo","append","attr","div","label","insert","html","util","labelStyle","style","client","getBoundingClientRect","width","height","isSubgraph","g","v","children","length","edgeToId","e","escapeId","w","name","ID_DELIM","str","String","replace","applyStyle","dom","styleFn","applyClass","classFn","otherClasses","applyTransition","selection","graph","_","transition","diagram","parser","p","db","flowDb","renderer","flowRendererV2","styles","flowStyles","init","cnf","flowchart","arrowMarkerAbsolute","setConfig","conf","setConf","keys","Object","key","addVertices","vert","svgId","doc","diagObj","svg","select","forEach","id","vertex","classStr","classes","join","getStylesFromArray","vertexNode","vertexText","text","log","labelType","evaluate","getConfig","htmlLabels","s","parentNode","removeChild","svgLabel","createElementNS","setAttribute","rows","split","common","row","tspan","setAttributeNS","textContent","appendChild","radious","_shape","type","setNode","shape","labelText","rx","ry","class","link","linkTarget","tooltip","getTooltip","domId","lookUpDomId","haveCallback","dir","props","padding","addEdges","edges","defaultStyle","defaultLabelStyle","cnt","linkIdCnt","defaultStyles","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","interpolate","curve","interpolateToCurve","curveLinear","defaultInterpolate","arrowheadStyle","labelpos","setEdge","getClasses","clear","parse","draw","_version","getDirection","securityLevel","conf2","nodeSpacing","rankSpacing","sandboxElement","nodes","contentDocument","body","document","graphlib","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","subG","subGraphs","getSubGraphs","i2","addVertex","title","getVertices","getEdges","i","selectAll","j","setParent","element","render","utils","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","indexNodes","labels","querySelectorAll","dim","getBBox","rect","insertBefore","firstChild","linkNode","getStyles","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","clusterBkg","clusterBorder","tertiaryColor","border2"],"sourceRoot":""}