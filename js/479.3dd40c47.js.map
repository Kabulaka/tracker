{"version":3,"file":"js/479.3dd40c47.js","mappings":"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","sources":["webpack://log-tracker/./node_modules/mermaid/dist/classDiagram-v2-8ecb0bfc.js"],"sourcesContent":["import { p as parser, d as db, s as styles } from \"./styles-4ba6ed67.js\";\nimport { select, curveLinear } from \"d3\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { l as log, c as getConfig, u as utils, o as setupGraphViewbox, n as interpolateToCurve, k as getStylesFromArray, e as common } from \"./mermaid-934d9bea.js\";\nimport { r as render } from \"./index-67a42d7d.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-80f1ebb6.js\";\nimport \"./createText-aebacdfe.js\";\nimport \"mdast-util-from-markdown\";\nconst sanitizeText = (txt) => common.sanitizeText(txt, getConfig());\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: void 0\n};\nconst addNamespaces = function(namespaces, g, _id, diagObj) {\n  const keys = Object.keys(namespaces);\n  log.info(\"keys:\", keys);\n  log.info(namespaces);\n  keys.forEach(function(id) {\n    var _a, _b;\n    const vertex = namespaces[id];\n    const shape = \"rect\";\n    const node = {\n      shape,\n      id: vertex.id,\n      domId: vertex.domId,\n      labelText: sanitizeText(vertex.id),\n      labelStyle: \"\",\n      style: \"fill: none; stroke: black\",\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    addClasses(vertex.classes, g, _id, diagObj, vertex.id);\n    log.info(\"setNode\", node);\n  });\n};\nconst addClasses = function(classes, g, _id, diagObj, parent) {\n  const keys = Object.keys(classes);\n  log.info(\"keys:\", keys);\n  log.info(classes);\n  keys.filter((id) => classes[id].parent == parent).forEach(function(id) {\n    var _a, _b;\n    const vertex = classes[id];\n    const cssClassStr = vertex.cssClasses.join(\" \");\n    const styles2 = { labelStyle: \"\", style: \"\" };\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = \"class_box\";\n    const node = {\n      labelStyle: styles2.labelStyle,\n      shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles2.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id, parent) || \"\",\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    if (parent) {\n      g.setParent(vertex.id, parent);\n    }\n    log.info(\"setNode\", node);\n  });\n};\nconst addNotes = function(notes, g, startEdgeId, classes) {\n  log.info(notes);\n  notes.forEach(function(note, i) {\n    var _a, _b;\n    const vertex = note;\n    const cssNoteStr = \"\";\n    const styles2 = { labelStyle: \"\", style: \"\" };\n    const vertexText = vertex.text;\n    const radius = 0;\n    const shape = \"note\";\n    const node = {\n      labelStyle: styles2.labelStyle,\n      shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles2.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: \"\",\n      type: \"note\",\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: ((_a = getConfig().flowchart) == null ? void 0 : _a.padding) ?? ((_b = getConfig().class) == null ? void 0 : _b.padding)\n    };\n    g.setNode(vertex.id, node);\n    log.info(\"setNode\", node);\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n    const edgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: \"relation\",\n      pattern: \"dotted\",\n      // Set link type for rendering\n      arrowhead: \"none\",\n      //Set edge extra labels\n      startLabelRight: \"\",\n      endLabelLeft: \"\",\n      //Set relation arrow types\n      arrowTypeStart: \"none\",\n      arrowTypeEnd: \"none\",\n      style: \"fill:none\",\n      labelStyle: \"\",\n      curve: interpolateToCurve(conf.curve, curveLinear)\n    };\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\nconst addRelations = function(relations, g) {\n  const conf2 = getConfig().flowchart;\n  let cnt = 0;\n  relations.forEach(function(edge) {\n    var _a;\n    cnt++;\n    const edgeData = {\n      //Set relationship style and line type\n      classes: \"relation\",\n      pattern: edge.relation.lineType == 1 ? \"dashed\" : \"solid\",\n      id: \"id\" + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === \"arrow_open\" ? \"none\" : \"normal\",\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === \"none\" ? \"\" : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === \"none\" ? \"\" : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: \"fill:none\",\n      labelStyle: \"\",\n      curve: interpolateToCurve(conf2 == null ? void 0 : conf2.curve, curveLinear)\n    };\n    log.info(edgeData, edge);\n    if (edge.style !== void 0) {\n      const styles2 = getStylesFromArray(edge.style);\n      edgeData.style = styles2.style;\n      edgeData.labelStyle = styles2.labelStyle;\n    }\n    edge.text = edge.title;\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n      if (((_a = getConfig().flowchart) == null ? void 0 : _a.htmlLabels) ?? getConfig().htmlLabels) {\n        edgeData.labelType = \"html\";\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + \"</span>\";\n      } else {\n        edgeData.labelType = \"text\";\n        edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n        if (edge.style === void 0) {\n          edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none\";\n        }\n        edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n      }\n    }\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\nconst setConf = function(cnf) {\n  conf = {\n    ...conf,\n    ...cnf\n  };\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing class - \", id);\n  const conf2 = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info(\"config:\", conf2);\n  const nodeSpacing = (conf2 == null ? void 0 : conf2.nodeSpacing) ?? 50;\n  const rankSpacing = (conf2 == null ? void 0 : conf2.rankSpacing) ?? 50;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: diagObj.db.getDirection(),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const namespaces = diagObj.db.getNamespaces();\n  const classes = diagObj.db.getClasses();\n  const relations = diagObj.db.getRelations();\n  const notes = diagObj.db.getNotes();\n  log.info(relations);\n  addNamespaces(namespaces, g, id, diagObj);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(\n    element,\n    g,\n    [\"aggregation\", \"extension\", \"composition\", \"dependency\", \"lollipop\"],\n    \"classDiagram\",\n    id\n  );\n  utils.insertTitle(svg, \"classTitleText\", (conf2 == null ? void 0 : conf2.titleTopMargin) ?? 5, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2 == null ? void 0 : conf2.diagramPadding, conf2 == null ? void 0 : conf2.useMaxWidth);\n  if (!(conf2 == null ? void 0 : conf2.htmlLabels)) {\n    const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\nfunction getArrowMarker(type) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = \"aggregation\";\n      break;\n    case 1:\n      marker = \"extension\";\n      break;\n    case 2:\n      marker = \"composition\";\n      break;\n    case 3:\n      marker = \"dependency\";\n      break;\n    case 4:\n      marker = \"lollipop\";\n      break;\n    default:\n      marker = \"none\";\n  }\n  return marker;\n}\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["sanitizeText","txt","common","getConfig","conf","dividerMargin","padding","textHeight","curve","addNamespaces","namespaces","g","_id","diagObj","keys","Object","log","info","forEach","id","_a","_b","vertex","shape","node","domId","labelText","labelStyle","style","flowchart","class","setNode","addClasses","classes","parent","filter","cssClassStr","cssClasses","join","styles2","vertexText","label","radius","classData","rx","ry","tooltip","db","getTooltip","haveCallback","link","width","type","setParent","addNotes","notes","startEdgeId","note","i","cssNoteStr","text","noteData","edgeId","edgeData","pattern","arrowhead","startLabelRight","endLabelLeft","arrowTypeStart","arrowTypeEnd","interpolateToCurve","curveLinear","setEdge","addRelations","relations","conf2","cnt","edge","relation","lineType","relationTitle1","relationTitle2","getArrowMarker","type1","type2","getStylesFromArray","title","arrowheadStyle","labelpos","htmlLabels","labelType","replace","lineBreakRegex","id1","id2","setConf","cnf","draw","async","_version","securityLevel","nodeSpacing","rankSpacing","graphlib","multigraph","compound","setGraph","rankdir","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","getNamespaces","getClasses","getRelations","getNotes","sandboxElement","length","select","root","nodes","contentDocument","body","svg","element","render","utils","insertTitle","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","doc","document","labels","querySelectorAll","dim","getBBox","rect","createElementNS","setAttribute","height","insertBefore","firstChild","marker","renderer","diagram","parser","styles","init","arrowMarkerAbsolute","clear"],"sourceRoot":""}