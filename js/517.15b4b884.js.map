{"version":3,"file":"js/517.15b4b884.js","mappings":"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","sources":["webpack://log-tracker/./node_modules/lodash-es/clone.js","webpack://log-tracker/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://log-tracker/./node_modules/mermaid/dist/index-67a42d7d.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-80f1ebb6.js\";\nimport { l as log, m as evaluate, c as getConfig } from \"./mermaid-934d9bea.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-aebacdfe.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, id, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, id, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  await recursiveRender(elem, graph, diagramtype, id);\n};\nexport {\n  render as r\n};\n"],"names":["CLONE_SYMBOLS_FLAG","clone","value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","clear$1","isDescendant","id","ancenstorId","log","trace","includes","edgeInCluster","clusterId","info","debug","copy","newGraph","rootId","warn","children","push","forEach","length","data","setNode","setParent","data2","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","graphlibJson","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","getConfig","flowchart","htmlLabels","text","labelType","createText","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","intersectRect","noteGroup","roundedWithTitle","classes","innerRect","append","divider","shapes","clusterElems","insertCluster","elem","clear","recursiveRender","async","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","positionNode","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3"],"sourceRoot":""}