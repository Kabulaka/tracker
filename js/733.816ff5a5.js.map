{"version":3,"file":"js/733.816ff5a5.js","mappings":"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","sources":["webpack://log-tracker/./node_modules/lodash-es/clone.js","webpack://log-tracker/./node_modules/dagre-d3-es/src/graphlib/json.js","webpack://log-tracker/../src/dagre-wrapper/mermaid-graphlib.js","webpack://log-tracker/../src/dagre-wrapper/clusters.js","webpack://log-tracker/../src/dagre-wrapper/index.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","/** Decorates with functions required by mermaids dagre-wrapper. */\nimport { log } from '../logger';\nimport * as graphlibJson from 'dagre-d3-es/src/graphlib/json.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\n\nexport let clusterDb = {};\nlet descendants = {};\nlet parents = {};\n\nexport const clear = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\n\nconst isDescendant = (id, ancenstorId) => {\n  // if (id === ancenstorId) return true;\n\n  log.trace('In isDecendant', ancenstorId, ' ', id, ' = ', descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst edgeInCluster = (edge, clusterId) => {\n  log.info('Decendants of ', clusterId, ' is ', descendants[clusterId]);\n  log.info('Edge is ', edge);\n  // Edges to/from the cluster is not in the cluster, they are in the parent\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n\n  if (!descendants[clusterId]) {\n    log.debug('Tilt, ', clusterId, ',not in decendants');\n    return false;\n  }\n  return (\n    descendants[clusterId].includes(edge.v) ||\n    isDescendant(edge.v, clusterId) ||\n    isDescendant(edge.w, clusterId) ||\n    descendants[clusterId].includes(edge.w)\n  );\n};\n\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    'Copying children of ',\n    clusterId,\n    'root',\n    rootId,\n    'data',\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n\n  // Include cluster node if it is not the root\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n\n  log.warn('Copying (nodes) clusterId', clusterId, 'nodes', nodes);\n\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info('cp ', node, ' to ', rootId, ' with parent ', clusterId); //,node, data, ' parent is ', clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn('Setting parent', node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug('Setting parent', node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info('In copy ', clusterId, 'root', rootId, 'data', graph.node(clusterId), rootId);\n        log.debug(\n          'Not Setting parent for node=',\n          node,\n          'cluster!==rootId',\n          clusterId !== rootId,\n          'node!==clusterId',\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug('Copying Edges', edges);\n      edges.forEach((edge) => {\n        log.info('Edge', edge);\n        const data = graph.edge(edge.v, edge.w, edge.name);\n        log.info('Edge data', data, rootId);\n        try {\n          // Do not copy edges in and out of the root cluster, they belong to the parent graph\n          if (edgeInCluster(edge, rootId)) {\n            log.info('Copying as ', edge.v, edge.w, data, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data, edge.name);\n            log.info('newGraph edges ', newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              'Skipping copy of edge ',\n              edge.v,\n              '-->',\n              edge.w,\n              ' rootId: ',\n              rootId,\n              ' clusterId:',\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug('Removing node', node);\n    graph.removeNode(node);\n  });\n};\nexport const extractDescendants = (id, graph) => {\n  // log.debug('Extracting ', id);\n  const children = graph.children(id);\n  let res = [...children];\n\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n\n  return res;\n};\n\n/**\n * Validates the graph, checking that all parent child relation points to existing nodes and that\n * edges between nodes also ia correct. When not correct the function logs the discrepancies.\n *\n * @param graph\n */\nexport const validate = (graph) => {\n  const edges = graph.edges();\n  log.trace('Edges: ', edges);\n  for (const edge of edges) {\n    if (graph.children(edge.v).length > 0) {\n      log.trace('The node ', edge.v, ' is part of and edge even though it has children');\n      return false;\n    }\n    if (graph.children(edge.w).length > 0) {\n      log.trace('The node ', edge.w, ' is part of and edge even though it has children');\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Finds a child that is not a cluster. When faking an edge between a node and a cluster.\n *\n * @param id\n * @param {any} graph\n */\nexport const findNonClusterChild = (id, graph) => {\n  // const node = graph.node(id);\n  log.trace('Searching', id);\n  // const children = graph.children(id).reverse();\n  const children = graph.children(id); //.reverse();\n  log.trace('Searching children of id ', id, children);\n  if (children.length < 1) {\n    log.trace('This is a valid node', id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace('Found replacement for', id, ' => ', _id);\n      return _id;\n    }\n  }\n};\n\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  // If the cluster has no external connections\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n\n  // Return the replacement node\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\n\nexport const adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug('Opting out, no graph ');\n    return;\n  } else {\n    log.debug('Opting in, graph ');\n  }\n  // Go through the nodes and for each cluster found, save a replacement node, this can be used when\n  // faking a link to a cluster\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        'Cluster identified',\n        id,\n        ' Replacement id in edges: ',\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n\n  // Check incoming and outgoing edges for each cluster\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug('Cluster identified', id, descendants);\n      edges.forEach((edge) => {\n        // log.debug('Edge, decendants: ', edge, decendants[id]);\n\n        // Check if any edge leaves the cluster (not the actual cluster, that's a link from the box)\n        if (edge.v !== id && edge.w !== id) {\n          // Any edge where either the one of the nodes is descending to the cluster but not the other\n          // if (decendants[id].indexOf(edge.v) < 0 && decendants[id].indexOf(edge.w) < 0) {\n\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n\n          // d1 xor d2 - if either d1 is true and d2 is false or the other way around\n          if (d1 ^ d2) {\n            log.warn('Edge: ', edge, ' leaves cluster ', id);\n            log.warn('Decendants of XXX ', id, ': ', descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug('Not a cluster ', id, descendants);\n    }\n  });\n\n  // For clusters with incoming and/or outgoing edges translate those edges to a real node\n  // in the cluster in order to fake the edge\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n    log.warn('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n\n    let v = e.v;\n    let w = e.w;\n    // Check if link is either from or to a cluster\n    log.warn(\n      'Fix XXX',\n      clusterDb,\n      'ids:',\n      e.v,\n      e.w,\n      'Translating: ',\n      clusterDb[e.v],\n      ' --- ',\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn('Fixing and trixing link to self - removing XXX', e.v, e.w, e.name);\n      log.warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + '---' + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: '',\n        labelText: edge.label,\n        padding: 0,\n        shape: 'labelRect',\n        style: '',\n      });\n      const edge1 = JSON.parse(JSON.stringify(edge));\n      const edge2 = JSON.parse(JSON.stringify(edge));\n      edge1.label = '';\n      edge1.arrowTypeEnd = 'none';\n      edge2.label = '';\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n\n      graph.setEdge(v, specialId, edge1, e.name + '-cyclic-special');\n      graph.setEdge(specialId, w, edge2, e.name + '-cyclic-special');\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn('Fixing and trixing - removing XXX', e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn('Fix Replacing with XXX', v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn('Adjusted Graph', graphlibJson.write(graph));\n  extractor(graph, 0);\n\n  log.trace(clusterDb);\n\n  // Remove references to extracted cluster\n  // graph.edges().forEach(edge => {\n  //   if (isDecendant(edge.v, clusterId) || isDecendant(edge.w, clusterId)) {\n  //     graph.removeEdge(edge);\n  //   }\n  // });\n};\n\nexport const extractor = (graph, depth) => {\n  log.warn('extractor - ', depth, graphlibJson.write(graph), graph.children('D'));\n  if (depth > 10) {\n    log.error('Bailing out');\n    return;\n  }\n  // For clusters without incoming and/or outgoing edges, create a new cluster-node\n  // containing the nodes and edges in the custer in a new graph\n  // for (let i = 0;)\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n\n  if (!hasChildren) {\n    log.debug('Done, no node has children', graph.nodes());\n    return;\n  }\n  // const clusters = Object.keys(clusterDb);\n  // clusters.forEach(clusterId => {\n  log.debug('Nodes = ', nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      'Extracting node',\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children('D'),\n      ' Depth ',\n      depth\n    );\n    // Note that the node might have been removed after the Object.keys call so better check\n    // that it still is in the game\n    if (!clusterDb[node]) {\n      // Skip if the node is not a cluster\n      log.debug('Not a cluster', node, depth);\n      // break;\n    } else if (\n      !clusterDb[node].externalConnections &&\n      // !graph.parent(node) &&\n      graph.children(node) &&\n      graph.children(node).length > 0\n    ) {\n      log.warn(\n        'Cluster without external connections, without a parent and with children',\n        node,\n        depth\n      );\n\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === 'TB' ? 'LR' : 'TB';\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn('Fixing dir', clusterDb[node].clusterData.dir, dir);\n      }\n\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true,\n      })\n        .setGraph({\n          rankdir: dir, // Todo: set proper spacing\n          nodesep: 50,\n          ranksep: 50,\n          marginx: 8,\n          marginy: 8,\n        })\n        .setDefaultEdgeLabel(function () {\n          return {};\n        });\n\n      log.warn('Old graph before copy', graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph,\n      });\n      log.warn('New graph after copy node: (', node, ')', graphlibJson.write(clusterGraph));\n      log.debug('Old graph after copy', graphlibJson.write(graph));\n    } else {\n      log.warn(\n        'Cluster ** ',\n        node,\n        ' **not meeting the criteria !externalConnections:',\n        !clusterDb[node].externalConnections,\n        ' no parent: ',\n        !graph.parent(node),\n        ' children ',\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children('D'),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n\n  nodes = graph.nodes();\n  log.warn('New list of nodes', nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(' Now next level', node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\n\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n\n  return result;\n};\n\nexport const sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\n","import intersectRect from './intersect/intersect-rect';\nimport { log } from '../logger';\nimport createLabel from './createLabel';\nimport { createText } from '../rendering-util/createText';\nimport { select } from 'd3';\nimport { getConfig } from '../config';\nimport { evaluate } from '../diagrams/common/common';\n\nconst rect = (parent, node) => {\n  log.info('Creating subgraph rect for ', node.id, node);\n\n  // Add outer g element\n  const shapeSvg = parent\n    .insert('g')\n    .attr('class', 'cluster' + (node.class ? ' ' + node.class : ''))\n    .attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n\n  // Create the label and insert it after the rect\n  const label = shapeSvg.insert('g').attr('class', 'cluster-label');\n\n  // const text = label\n  //   .node()\n  //   .appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n  const text =\n    node.labelType === 'markdown'\n      ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels })\n      : label.node().appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n\n  // Get the size of the label\n  let bbox = text.getBBox();\n\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr('width', bbox.width);\n    dv.attr('height', bbox.height);\n  }\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n\n  log.trace('Data ', node, JSON.stringify(node));\n  // center the rect around its coordinate\n  rect\n    .attr('style', node.style)\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', node.x - width / 2)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', width)\n    .attr('height', node.height + padding);\n\n  if (useHtmlLabels) {\n    label.attr(\n      'transform',\n      // This puts the labal on top of the box instead of inside it\n      'translate(' + (node.x - bbox.width / 2) + ', ' + (node.y - node.height / 2) + ')'\n    );\n  } else {\n    label.attr(\n      'transform',\n      // This puts the labal on top of the box instead of inside it\n      'translate(' + node.x + ', ' + (node.y - node.height / 2) + ')'\n    );\n  }\n  // Center the label\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\n/**\n * Non visible cluster where the note is group with its\n *\n * @param {any} parent\n * @param {any} node\n * @returns {any} ShapeSvg\n */\nconst noteGroup = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', 'note-cluster').attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  // center the rect around its coordinate\n  rect\n    .attr('rx', node.rx)\n    .attr('ry', node.ry)\n    .attr('x', node.x - node.width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', node.width + padding)\n    .attr('height', node.height + padding)\n    .attr('fill', 'none');\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  // Create the label and insert it after the rect\n  const label = shapeSvg.insert('g').attr('class', 'cluster-label');\n  const innerRect = shapeSvg.append('rect');\n\n  const text = label\n    .node()\n    .appendChild(createLabel(node.labelText, node.labelStyle, undefined, true));\n\n  // Get the size of the label\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr('width', bbox.width);\n    dv.attr('height', bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n\n  // center the rect around its coordinate\n  rect\n    .attr('class', 'outer')\n    .attr('x', node.x - width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding)\n    .attr('width', width + padding)\n    .attr('height', node.height + padding);\n  innerRect\n    .attr('class', 'inner')\n    .attr('x', node.x - width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2 - halfPadding + bbox.height - 1)\n    .attr('width', width + padding)\n    .attr('height', node.height + padding - bbox.height - 3);\n\n  // Center the label\n  label.attr(\n    'transform',\n    'translate(' +\n      (node.x - bbox.width / 2) +\n      ', ' +\n      (node.y -\n        node.height / 2 -\n        node.padding / 3 +\n        (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) +\n      ')'\n  );\n\n  const rectBox = rect.node().getBBox();\n  node.height = rectBox.height;\n\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\nconst divider = (parent, node) => {\n  // Add outer g element\n  const shapeSvg = parent.insert('g').attr('class', node.classes).attr('id', node.id);\n\n  // add the rect\n  const rect = shapeSvg.insert('rect', ':first-child');\n\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n\n  // center the rect around its coordinate\n  rect\n    .attr('class', 'divider')\n    .attr('x', node.x - node.width / 2 - halfPadding)\n    .attr('y', node.y - node.height / 2)\n    .attr('width', node.width + padding)\n    .attr('height', node.height + padding);\n\n  const rectBox = rect.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n};\n\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\n\nlet clusterElems = {};\n\nexport const insertCluster = (elem, node) => {\n  log.trace('Inserting cluster');\n  const shape = node.shape || 'rect';\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nexport const getClusterTitleWidth = (elem, node) => {\n  const label = createLabel(node.labelText, node.labelStyle, undefined, true);\n  elem.node().appendChild(label);\n  const width = label.getBBox().width;\n  elem.node().removeChild(label);\n  return width;\n};\n\nexport const clear = () => {\n  clusterElems = {};\n};\n\nexport const positionCluster = (node) => {\n  log.info('Position cluster (' + node.id + ', ' + node.x + ', ' + node.y + ')');\n  const el = clusterElems[node.id];\n\n  el.attr('transform', 'translate(' + node.x + ', ' + node.y + ')');\n};\n","import { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlibJson from 'dagre-d3-es/src/graphlib/json.js';\nimport insertMarkers from './markers';\nimport { updateNodeBounds } from './shapes/util';\nimport {\n  clear as clearGraphlib,\n  clusterDb,\n  adjustClustersAndEdges,\n  findNonClusterChild,\n  sortNodesByHierarchy,\n} from './mermaid-graphlib';\nimport { insertNode, positionNode, clear as clearNodes, setNodeElem } from './nodes';\nimport { insertCluster, clear as clearClusters } from './clusters';\nimport { insertEdgeLabel, positionEdgeLabel, insertEdge, clear as clearEdges } from './edges';\nimport { log } from '../logger';\n\nconst recursiveRender = (_elem, graph, diagramtype, parentCluster) => {\n  log.info('Graph in recursive render: XXX', graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace('Dir in recursive render - dir:', dir);\n\n  const elem = _elem.insert('g').attr('class', 'root');\n  if (!graph.nodes()) {\n    log.info('No nodes found for', graph);\n  } else {\n    log.info('Recursive render XXX', graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace('Recursive edges', graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert('g').attr('class', 'clusters');\n  const edgePaths = elem.insert('g').attr('class', 'edgePaths');\n  const edgeLabels = elem.insert('g').attr('class', 'edgeLabels');\n  const nodes = elem.insert('g').attr('class', 'nodes');\n\n  // Insert nodes, this will insert them into the dom and each node will get a size. The size is updated\n  // to the abstract node and is later used by dagre for the layout\n  graph.nodes().forEach(function (v) {\n    const node = graph.node(v);\n    if (parentCluster !== undefined) {\n      const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n      // data.clusterPositioning = true;\n      log.info('Setting data for cluster XXX (', v, ') ', data, parentCluster);\n      graph.setNode(parentCluster.id, data);\n      if (!graph.parent(v)) {\n        log.trace('Setting parent', v, parentCluster.id);\n        graph.setParent(v, parentCluster.id, data);\n      }\n    }\n    log.info('(Insert) Node XXX' + v + ': ' + JSON.stringify(graph.node(v)));\n    if (node && node.clusterNode) {\n      // const children = graph.children(v);\n      log.info('Cluster identified', v, node.width, graph.node(v));\n      const o = recursiveRender(nodes, node.graph, diagramtype, graph.node(v));\n      const newEl = o.elem;\n      updateNodeBounds(node, newEl);\n      node.diff = o.diff || 0;\n      log.info('Node bounds (abc123)', v, node, node.width, node.x, node.y);\n      setNodeElem(newEl, node);\n\n      log.warn('Recursive render complete ', newEl, node);\n    } else {\n      if (graph.children(v).length > 0) {\n        // This is a cluster but not to be rendered recursively\n        // Render as before\n        log.info('Cluster - the non recursive path XXX', v, node.id, node, graph);\n        log.info(findNonClusterChild(node.id, graph));\n        clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        // insertCluster(clusters, graph.node(v));\n      } else {\n        log.info('Node - the non recursive path', v, node.id, node);\n        insertNode(nodes, graph.node(v), dir);\n      }\n    }\n  });\n\n  // Insert labels, this will insert them into the dom so that the width can be calculated\n  // Also figure out which edges point to/from clusters and adjust them accordingly\n  // Edges from/to clusters really points to the first child in the cluster.\n  // TODO: pick optimal child in the cluster to us as link anchor\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ', e, ' ', JSON.stringify(graph.edge(e)));\n\n    // Check if link is either from or to a cluster\n    log.info('Fix', clusterDb, 'ids:', e.v, e.w, 'Translateing: ', clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n\n  graph.edges().forEach(function (e) {\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(e));\n  });\n  log.info('#############################################');\n  log.info('###                Layout                 ###');\n  log.info('#############################################');\n  log.info(graph);\n  dagreLayout(graph);\n  log.info('Graph after layout:', graphlibJson.write(graph));\n  // Move the nodes to the correct place\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function (v) {\n    const node = graph.node(v);\n    log.info('Position ' + v + ': ' + JSON.stringify(graph.node(v)));\n    log.info(\n      'Position ' + v + ': (' + node.x,\n      ',' + node.y,\n      ') width: ',\n      node.width,\n      ' height: ',\n      node.height\n    );\n    if (node && node.clusterNode) {\n      // clusterDb[node.id].node = node;\n\n      positionNode(node);\n    } else {\n      // Non cluster node\n      if (graph.children(v).length > 0) {\n        // A cluster in the non-recursive way\n        // positionCluster(node);\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n\n  // Move the edge labels to the correct place after layout\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.info('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(edge), edge);\n\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph);\n    positionEdgeLabel(edge, paths);\n  });\n\n  graph.nodes().forEach(function (v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === 'group') {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\n\nexport const render = (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clearNodes();\n  clearEdges();\n  clearClusters();\n  clearGraphlib();\n\n  log.warn('Graph at first:', graphlibJson.write(graph));\n  adjustClustersAndEdges(graph);\n  log.warn('Graph after:', graphlibJson.write(graph));\n  // log.warn('Graph ever  after:', graphlibJson.write(graph.node('A').graph));\n  recursiveRender(elem, graph, diagramtype);\n};\n\n// const shapeDefinitions = {};\n// export const addShape = ({ shapeType: fun }) => {\n//   shapeDefinitions[shapeType] = fun;\n// };\n\n// const arrowDefinitions = {};\n// export const addArrow = ({ arrowType: fun }) => {\n//   arrowDefinitions[arrowType] = fun;\n// };\n"],"names":["CLONE_SYMBOLS_FLAG","clone","value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","clear$1","clear","isDescendant","id","ancenstorId","log","includes","edgeInCluster","clusterId","copy","newGraph","rootId","children","push","forEach","length","data","setNode","setParent","data2","setEdge","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","JSON","stringify","removeEdge","specialId","domId","labelStyle","labelText","label","padding","shape","style","edge1","parse","edge2","arrowTypeEnd","fromCluster","toCluster","graphlibJson","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","sorter","result","Object","assign","sorted","sortNodesByHierarchy","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","getConfig","flowchart","htmlLabels","text","labelType","createText","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","halfPadding","diff","rx","ry","x","y","rectBox","intersect","point","intersectRect","noteGroup","roundedWithTitle","classes","innerRect","append","divider","shapes","clusterElems","insertCluster","elem","recursiveRender","_elem","diagramtype","parentCluster","clusters","edgePaths","edgeLabels","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","positionNode","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3"],"sourceRoot":""}